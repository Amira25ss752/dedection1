pip install ultralytics torch torchvision
import torch
from ultralytics import YOLO
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Charger le modèle YOLOv8 pré-entraîné
model = YOLO('yolov8n.pt')  # Vous pouvez choisir 'yolov8s.pt', 'yolov8m.pt' en fonction de vos besoins

# Charger l'image à détecter
image_path = "path_to_your_image.jpg"
image = cv2.imread(image_path)

# Prétraitement de l'image
input_size = 320  # Taille d'entrée du modèle, similaire à celle de MobileNetV3
image_resized = cv2.resize(image, (input_size, input_size))  # Redimensionner l'image à 320x320
image_normalized = image_resized / 255.0  # Normalisation entre 0 et 1

# Convertir l'image en tensor et ajouter une dimension de batch (Batch size = 1)
image_tensor = torch.tensor(image_normalized).permute(2, 0, 1).unsqueeze(0).float()

# Ici, vous appliquez une couche convolutive 2D comme dans MobileNetV3
conv_layer = torch.nn.Conv2d(in_channels=3, out_channels=32, kernel_size=3, stride=1, padding=1)
feature_map = conv_layer(image_tensor)  # Extraire les caractéristiques avec la convolution

# Passer l'image transformée par la convolution dans le modèle YOLOv8
# Nous utilisons la sortie de la convolution comme une "entrée prétraitée" pour le modèle YOLOv8.
# Cela permet de combiner un prétraitement similaire à celui de MobileNet avec YOLOv8 pour la détection.
results = model(feature_map)

# Afficher les résultats de détection (boîtes de détection, classes, scores)
results.show()

# Afficher l'image avec les résultats
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title("Détection d'objets avec YOLOv8")
plt.show()
